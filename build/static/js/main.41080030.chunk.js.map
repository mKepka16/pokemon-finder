{"version":3,"sources":["actions/pokemonActionTypes.ts","actions/pokemonListActionTypes.ts","components/DataList.tsx","components/Search.tsx","actions/pokemonListActions.ts","actions/pokemonActions.ts","components/Image.tsx","components/Abilities.tsx","components/Stats.tsx","App.tsx","reducers/pokemonListReducer.ts","reducers/pokemonReducer.ts","reducers/rootReducer.ts","store.ts","index.tsx"],"names":["POKEMON_LOADING","POKEMON_FAIL","POKEMON_SUCCESS","POKEMONS_SUCCESS","POKEMONS_FAIL","POKEMONS_LOADING","DataList","props","useState","pokemonName","setPokemonName","className","type","list","value","onChange","e","target","setPokemon","id","pokemons","map","pokemon","key","name","Search","pokemonsList","useSelector","state","dispatch","useDispatch","useEffect","a","axios","get","response","payload","data","results","onClick","pokemonInfo","promises","abilities","forEach","ability","promise","url","push","Promise","all","responses","effect","effect_entries","filter","language","short_effect","pokemonWithSimplifiedAbilities","Image","src","sprites","front_default","alt","Abilities","Stats","stats","stat","percentageStat","base_stat","style","width","background","App","defaultState","isLoading","pokemonReducer","action","rootReducer","combineReducers","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.41080030.chunk.js","sourcesContent":["export const POKEMON_LOADING = 'POKEMON_LOADING';\nexport const POKEMON_FAIL = 'POKEMON_FAIL';\nexport const POKEMON_SUCCESS = 'POKEMON_SUCCESS';\n\nexport type PokemonAbility = {\n  ability: {\n    name: string,\n    url: string\n  }\n}\n\nexport type SimplifiedPokemonAbility = {\n  name: string,\n  effect: string\n}\n\nexport type PokemonSprites = {\n  front_default: string\n}\n\nexport type PokemonStats = {\n  base_stat: number,\n  stat: {\n    name: string\n  }\n}\n\nexport type PokemonType = {\n  abilities: SimplifiedPokemonAbility[],\n  sprites: PokemonSprites,\n  stats: PokemonStats[],\n  name: string\n}\n\nexport type PokemonApiInfo = {\n  abilities: PokemonAbility[],\n  sprites: PokemonSprites,\n  stats: PokemonStats[],\n  name: string\n}\n\nexport type AbilityEffect = {\n  short_effect: string,\n  language: {\n    name: string\n  }\n}\n\nexport type AbilityDescription = {\n  effect_entries: AbilityEffect[],\n  name: string\n}\n\nexport type AbilityWithShortDescription = {\n  name: string,\n  effect: string  \n}\n\n\n\n\nexport interface PokemonLoading {\n  type: typeof POKEMON_LOADING\n}\n\nexport interface PokemonFail {\n  type: typeof POKEMON_FAIL\n\n}\n\nexport interface PokemonSuccess {\n  type: typeof POKEMON_SUCCESS\n  payload: PokemonType,\n}\n\nexport type PokemonDispatchTypes = PokemonLoading | PokemonFail | PokemonSuccess;\n\n","export const POKEMONS_SUCCESS = 'POKEMONS_SUCCESS';\nexport const POKEMONS_FAIL = 'POKEMONS_FAIL';\nexport const POKEMONS_LOADING = 'POKEMONS_LOADING';\n\n\nexport type Pokemon = {\n  name: string\n}\n\nexport type PokemonsList = {\n  count: number,\n  results: Pokemon[]\n}\n\n\nexport interface PokemonsFail {\n  type: typeof POKEMONS_FAIL\n}\n\nexport interface PokemonsLoading {\n  type: typeof POKEMONS_LOADING\n}\n\nexport interface PokemonsSuccess {\n  type: typeof POKEMONS_SUCCESS\n  payload: PokemonsList\n}\n\nexport type PokemonDispatchTypes = PokemonsLoading | PokemonsFail | PokemonsSuccess;\n\n","import React, { useState } from 'react'\nimport { Pokemon } from '../actions/pokemonListActionTypes';\nimport './DataList.css';\n\ninterface Props {\n  pokemons?: Pokemon[],\n  setPokemon: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst DataList: React.FC<Props> = (props) => {\n  const [pokemonName, setPokemonName] = useState('');\n\n  return (\n    <div className=\"search-box\">\n      <input type=\"text\" list=\"pokemons\" value={ pokemonName } onChange={ e => { setPokemonName(e.target.value); props.setPokemon(e.target.value) }}/>\n\n      <datalist id=\"pokemons\">\n        { props.pokemons && props.pokemons.map((pokemon, key) => (\n          <option value={ pokemon.name } key={ key }></option>\n        )) }\n      </datalist>\n    </div>\n  )\n}\n\nexport default DataList;","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPokemon } from '../actions/pokemonActions';\nimport { getPokemonList } from '../actions/pokemonListActions';\nimport { RootStore } from '../store';\nimport DataList from './DataList';\nimport './Search.css';\n\nconst Search = () => {\n  const { pokemonsList } = useSelector((state: RootStore) => state);\n  const [pokemonName, setPokemonName] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSubmit = () => {\n    dispatch(getPokemon(pokemonName));\n  }\n\n  useEffect(() => {\n    dispatch(getPokemonList());\n  }, [])\n\n  return (\n    <div className=\"search-box\">\n      <DataList pokemons={ pokemonsList.pokemons?.results } setPokemon={ setPokemonName }/>\n      <button onClick={ handleSubmit }>Search</button>\n    </div>\n  )\n}\n\nexport default Search;","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { PokemonDispatchTypes } from \"./pokemonListActionTypes\";\nimport { POKEMONS_FAIL, POKEMONS_SUCCESS, POKEMONS_LOADING } from './pokemonListActionTypes'\n\nexport const getPokemonList = () => async (dispatch: Dispatch<PokemonDispatchTypes>) => {\n  try {\n    dispatch({\n      type: POKEMONS_LOADING\n    })\n\n    const response = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=1118')\n    \n    dispatch({\n      type: POKEMONS_SUCCESS,\n      payload: response.data\n    })\n  }\n  catch (error) {\n    dispatch({\n      type: POKEMONS_FAIL\n    })\n  }\n}","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { PokemonDispatchTypes, PokemonType, POKEMON_FAIL, POKEMON_LOADING, POKEMON_SUCCESS, AbilityDescription, AbilityWithShortDescription, PokemonApiInfo } from './pokemonActionTypes'\n\nexport const getPokemon = (pokemon: string) => async (dispatch: Dispatch<PokemonDispatchTypes>) => {\n  try {\n    dispatch({\n      type: POKEMON_LOADING\n    })\n\n    const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemon}`)\n\n    const pokemonInfo: PokemonApiInfo = response.data;\n    const promises: Promise<any>[] = [];\n\n    pokemonInfo.abilities.forEach(ability => {\n      const promise = axios.get(ability.ability.url);\n      promises.push(promise);\n    })\n\n    const responses = await Promise.all(promises)\n    const abilities: AbilityWithShortDescription[] = responses.map(response => {\n      const ability: AbilityDescription = response.data;\n      const effect = ability.effect_entries.filter(effect => {\n        return effect.language.name == 'en';\n      })[0].short_effect;\n\n      const name = ability.name;\n\n      return { name, effect }\n    })\n\n    const pokemonWithSimplifiedAbilities: PokemonType = {\n      ...pokemonInfo,\n      abilities\n    };\n    \n\n\n    dispatch({\n      type: POKEMON_SUCCESS,\n      payload: {\n        ...pokemonWithSimplifiedAbilities,\n        name: pokemon\n      }\n    })\n  }\n  catch (error) {\n    dispatch({\n      type: POKEMON_FAIL\n    })\n  }\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootStore } from '../store';\n\nconst Image: React.FC<any> = (props) => {\n  const { pokemon: { pokemon } } = useSelector((state: RootStore) => state);\n\n  return (\n    <div className=\"col image\">\n      <img src={ pokemon?.sprites.front_default } alt=\"pokemon\"/>\n      <div className=\"bottom-text\">{ pokemon?.name }</div>\n    </div>\n  );\n}\n\nexport default Image;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootStore } from '../store';\n\nconst Abilities: React.FC<any> = (props) => {\n  const { pokemon: { pokemon } } = useSelector((state: RootStore) => state);\n\n  return (\n    <div className=\"col abilities\">\n      <div>\n        { pokemon?.abilities.map((ability, key) => (\n          <div key={ key }>\n            <p className=\"name\">{ ability.name }</p>\n            <p className=\"effect\">{ ability.effect }</p>\n          </div>\n        )) }\n      </div>\n      <div className=\"bottom-text\">Abilities</div>\n    </div>\n  );\n}\n\nexport default Abilities;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootStore } from '../store';\n\nconst Stats: React.FC<any> = (props) => {\n  const { pokemon: { pokemon } } = useSelector((state: RootStore) => state);\n\n  const getSuitableColor = (value: number): string => {\n    const medium = '#e9c46a';\n    const low = '#dc2f02';\n    const high = '#2a9d8f';\n    if(value < 34)\n      return low;\n    if(value > 66)\n      return high;\n    return medium;\n  }\n  \n\n  return (\n    <div className=\"col stats\">\n      { pokemon?.stats.map((stat, key) => {\n        let percentageStat = stat.base_stat;\n        if(percentageStat > 100) \n          percentageStat = 100; \n\n        return (\n          <div key={ key }>\n            <div className='stat'>\n              <div className=\"text\">{ stat.stat.name }</div>\n              <div className=\"bg\" style={{ \n                  width: percentageStat+'%',\n                  background: getSuitableColor(percentageStat)\n                }}></div>\n            </div>\n          </div>\n        )\n      }) }\n      <div className=\"bottom-text\">Base stats</div>\n    </div>\n  );\n}\n\nexport default Stats;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Search from './components/Search';\nimport Image from './components/Image';\nimport Abilities from './components/Abilities';\nimport { RootStore } from './store';\nimport './App.css';\nimport Stats from './components/Stats';\n\nconst App: React.FC<any> = (props) => {\n  const { pokemon: { pokemon } } = useSelector((state: RootStore) => state); \n\n  return (\n    <div className=\"main\">\n      <Search/>\n      { pokemon && (\n        <div className=\"pokemon-info\">\n          <Image/>\n          <Abilities/>\n          <Stats/>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { PokemonDispatchTypes, PokemonsList, POKEMONS_LOADING, POKEMONS_FAIL, POKEMONS_SUCCESS } from './../actions/pokemonListActionTypes';\n\ninterface DefaultStateI {\n  isLoading: boolean,\n  pokemons?: PokemonsList\n}\n\nconst defaultState: DefaultStateI = {\n  isLoading: false\n}\n\nexport const pokemonListReducer = (state: DefaultStateI =  defaultState, action: PokemonDispatchTypes): DefaultStateI => {\n  switch(action.type) {\n    case POKEMONS_LOADING:\n      return {\n        isLoading: true\n      }\n    case POKEMONS_FAIL: \n      return {\n        isLoading: false,\n      }\n    case POKEMONS_SUCCESS:\n      return {\n        isLoading: false,\n        pokemons: action.payload\n      }\n    default:\n      return state;\n  }\n}","import { PokemonType, PokemonDispatchTypes, POKEMON_FAIL, POKEMON_LOADING, POKEMON_SUCCESS } from './../actions/pokemonActionTypes';\n\ninterface DefaultStateI {\n  isLoading: boolean,\n  pokemon?: PokemonType,\n}\n\nconst defaultState: DefaultStateI = {\n  isLoading: false,\n}\n\nconst pokemonReducer = (state: DefaultStateI = defaultState, action: PokemonDispatchTypes): DefaultStateI => {\n  switch(action.type) {\n    case POKEMON_FAIL:\n      return {\n        isLoading: false\n      }\n    case POKEMON_LOADING:\n      return {\n        isLoading: true\n      }\n    case POKEMON_SUCCESS:\n      return {\n        isLoading: false,\n        pokemon: action.payload\n      }\n    default:\n      return state;\n  }\n} \n\nexport default pokemonReducer;\n\n","import { combineReducers } from 'redux';\nimport { pokemonListReducer } from './pokemonListReducer';\nimport pokemonReducer from './pokemonReducer';\n\nconst rootReducer = combineReducers({\n  pokemon: pokemonReducer,\n  pokemonsList: pokemonListReducer\n});\n\nexport default rootReducer;","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst Store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport type RootStore = ReturnType<typeof rootReducer>;\n\nexport default Store;","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport Store from './store';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={ Store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}